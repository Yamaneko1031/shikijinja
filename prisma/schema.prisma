// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model EmaPost {
  id        String      @id @default(cuid())
  userId    String?
  texts     Json        // TextBlock[] をそのまま保存
  reply     String
  emaImage  String
  decision  String      @default("ALLOW")
  reasons   Json        @default("[]")
  createdAt DateTime    @default(now())
  user      User?       @relation("UserEmaPosts", fields: [userId], references: [id], onDelete: SetNull)
}

model PromptTemplate {
  id            String   @id @default(cuid())
  label         String   @unique
  systemPrompt  String
  userPrompt    String
  model         String
  instructions  String
  temperature   Float    @default(0.7)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OmikujiResult {
  id              String      @id @default(cuid())
  userId          String?
  job             String
  period          String
  fortuneNumber   Int
  fortune         String
  msg             String
  details         Json        @default("[]")
  createdAt       DateTime    @default(now())
  user            User?       @relation("UserOmikujiResults", fields: [userId], references: [id], onDelete: SetNull)
}


model Omamori {
  id                      String      @id @default(cuid())
  userId                  String?
  name                    String
  additionalDescription   String
  effects                 Json        @default("[]")
  createdAt               DateTime    @default(now())
  user                    User?       @relation("UserOmamoriItems", fields: [userId], references: [id], onDelete: SetNull)
}


model TokuCount {
  id              String      @id @default(cuid())
  userId          String
  date            DateTime
  counts          Json        @default("{}")

  @@unique([userId, date])
}

model User {
  id              String           @id @default(cuid())
  isGuest         Boolean          @default(true)
  email           String?          @unique
  passwordHash    String?
  name            String?
  coin            Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastAccessAt    DateTime         @default(now())

  guestSessions   GuestSession[]   @relation("UserGuestSessions")
  accounts        Account[]        @relation("UserAccounts")
  emaPosts        EmaPost[]        @relation("UserEmaPosts")
  omikujiResults  OmikujiResult[]  @relation("UserOmikujiResults")
  omamoriItems    Omamori[]        @relation("UserOmamoriItems")

  @@index([isGuest, lastAccessAt])
}

model Account {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)
  provider        String      // 'google', 'twitter', 'x' など
  providerUserId  String      // GoogleやXのユーザーID
  accessToken     String?
  refreshToken    String?

  @@unique([provider, providerUserId])
}

model GuestSession {
  id              String    @id @default(cuid()) // セッションID
  userId          String
  expiresAt       DateTime
  user            User      @relation("UserGuestSessions", fields: [userId], references: [id])
}